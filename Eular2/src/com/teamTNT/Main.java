package com.teamTNT;

public class Main {

    /*
    Q.2 https://projecteuler.net/problem=2
         Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        */

    public static void main(String[] args) {
	// write your code here
        int fabicoiSeqNum = 34;
        double limit = 4000000;
        int startFrom = 2;

        double[] listOfFab = fabiconiNumberList(fabicoiSeqNum,limit,startFrom);
        Long total = addAllEven(listOfFab);
        System.out.println(total);
    }

    private static Long addAllEven(double[] listOfFab) {
        long sum = 0L;
        for(double n: listOfFab){
            if(n % 2 == 0){
                sum += n;
            }
        }
        return sum;
    }

    private static double[] fabiconiNumberList(int n,double limit,int startFrom) {
        double[] listOfFab = new double[n];
        for(int i = startFrom; i < n; i++){
            double sqrtOf5 = Math.sqrt(5);
            double num = Math.pow(1 + sqrtOf5 ,i);
            double num2 = Math.pow(1 - sqrtOf5 ,i);
            double numNumerator = num - num2;
            double numDenominatoer = Math.pow(2,i) * sqrtOf5;
            double total = (int) ( numNumerator / numDenominatoer);
            if(total > limit){
                break;
            }
            listOfFab[i] = total;
        }
         return listOfFab;
    }
}
